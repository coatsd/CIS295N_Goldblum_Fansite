// <auto-generated />
using DC_Fan_Site_Goldbloom.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace DCFan_Site_Goldbloom.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DC_Fan_Site_Goldbloom.Models.Book", b =>
                {
                    b.Property<int>("BookID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<string>("Genre");

                    b.Property<string>("Link");

                    b.Property<string>("PubDate");

                    b.Property<string>("Publisher");

                    b.Property<string>("Title");

                    b.HasKey("BookID");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("DC_Fan_Site_Goldbloom.Models.Media", b =>
                {
                    b.Property<int>("MediaID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Artist");

                    b.Property<string>("Link");

                    b.Property<string>("Title");

                    b.Property<string>("Type");

                    b.HasKey("MediaID");

                    b.ToTable("Medias");
                });

            modelBuilder.Entity("DC_Fan_Site_Goldbloom.Models.Reply", b =>
                {
                    b.Property<int>("ReplyID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Body");

                    b.Property<string>("Header");

                    b.Property<int>("Rating");

                    b.Property<int?>("StoryID");

                    b.Property<int?>("UserID");

                    b.HasKey("ReplyID");

                    b.HasIndex("StoryID");

                    b.HasIndex("UserID");

                    b.ToTable("Replies");
                });

            modelBuilder.Entity("DC_Fan_Site_Goldbloom.Models.Story", b =>
                {
                    b.Property<int>("StoryID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Body");

                    b.Property<string>("Header");

                    b.Property<int?>("UserID");

                    b.HasKey("StoryID");

                    b.HasIndex("UserID");

                    b.ToTable("Stories");
                });

            modelBuilder.Entity("DC_Fan_Site_Goldbloom.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsSignedIn");

                    b.Property<string>("Password");

                    b.Property<string>("Username");

                    b.HasKey("UserID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("DC_Fan_Site_Goldbloom.Models.Reply", b =>
                {
                    b.HasOne("DC_Fan_Site_Goldbloom.Models.Story")
                        .WithMany("Replies")
                        .HasForeignKey("StoryID");

                    b.HasOne("DC_Fan_Site_Goldbloom.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("DC_Fan_Site_Goldbloom.Models.Story", b =>
                {
                    b.HasOne("DC_Fan_Site_Goldbloom.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });
#pragma warning restore 612, 618
        }
    }
}
